#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "bst.h"
#include "heapll.h"
#include "htable.h"

int main(int argc, char *argv[])
{
	FILE *file = NULL;
	int *freq=NULL;
	heaphead *head = NULL;
	/*bst *huftree = NULL;*/
	char **codes = NULL;

	heapnode *node = NULL;
	
	if(argc!=2)
	{
		printusage();
		return 0;
	}	

	if((file = fopen(argv[1], "r")) == NULL)
	{
		perror(NULL);
		return 0;
	}

	
	if((freq = getfreq(file))==NULL)
	{
		perror(NULL);
		return 0;
	}
	
	fclose(file);

	if((head = makelist(freq)) == NULL)
	{
		free(freq);
		perror(NULL);
		return 0;
	}
	
	/*node = head -> next;
	while(node)
	{
		printf("ch: %x, freq: %i\n", node -> ch, node -> frequency);
		node = node -> next;
	}
	
	*/
	free(freq);

	if((head = makeHtable(head)) == NULL)
	{
		printf("well makeHtable didn't word\n");
		perror(NULL);
		return 0;
	}

	/*
	node = head -> next;
	
	printf(" -- htable --\n\tfreq: %i\n\tsize: %i\n", head -> frequency, head -> size);
	while(node != NULL)
	{
		printf("ch: %c	freq: %i\n", node -> ch, node -> frequency);
		node = node -> next;
	} */

	codes = getCodes(head);
	if(!codes)
	{
		freeList(head);
		return 0;
	}

	printCodes(codes);
	

	freeList(head);
	return 0;	

}


void printusage()
{
	fprintf(stderr, "usage: htable <filename>\n");
}


int *getfreq(FILE *file)
{
	int ch;
	int i;
	int *arr;
	
	arr = (int *)malloc(256 * sizeof(int));
	if(!arr)
		return NULL;
	
	/*init all array to 0 */	
	for(i=0; i<256; i++)
		arr[i] = 0;

	
	while((ch=fgetc(file))!=EOF)
	{
		if(ch>=0 && ch<=255) 
			arr[ch]++;
	}
	
	return arr;
}


heaphead *makelist(int *arr)
{
	heaphead *head = NULL;
	heapnode *node = NULL;
	int i;

	head = makeHeapHead();
	if (!head)
		return NULL;
	
	for(i=0; i<256; i++)
	{
		if(arr[i]>0)
		{
			if((node = makeHeapNode(i, arr[i], NULL, NULL)) == NULL)
			{
				freeList(head);
				return NULL;
			}
			
			head = addNodeOrdered(head, node);
			
			if(!head)
				return NULL;
		}
	}

	return head;
}


heaphead *makeHtable(heaphead *head)
{
	/*bst *tempbst = NULL;
	htable *temphtable = NULL;*/
	heapnode *node = NULL;
	
	if(!head || head -> size == 0)
		return head;
	
	do
	{
		head = combine2min(head);
		if(!head)
			return NULL;
	} while(head->size > 1);

	
	node = head -> next;
	
	/*
	if(node->tree == NULL)
	{
		tempbst = makeTreeNode(node -> frequency, node -> ch, NULL, NULL);
		if(!tempbst)
		{	
			freeList(head);
			return NULL;
		}

		temphtable = makeHtableHead(node -> frequency, tempbst, NULL);
		if(!tempbst)
		{
			freeList(head);
			free(tempbst);	
			return NULL;
		}
		
		node -> tree = temphtable;
	}*/

	return head;
}


heaphead *combine2min(heaphead *head)
{
	heapnode *node1 = NULL;
	heapnode *node2 = NULL;
	heapnode *rest = NULL;
	bst *treehead = NULL;
	bst *tree1 = NULL;
	bst *tree2 = NULL;

	if(!head)
		return NULL;	

	node1 = head -> next;
	if(!node1)
	{
		freeList(head);
		return NULL;
	}

	node2 = node1 -> next;
	/*if(!node2)
        {
                freeList(head);
                return NULL;
        }

	rest = node2 -> rest;*/
	
	if(node1->tree == NULL)
	{
		tree1 = makeTreeNode(node1->frequency, node1->ch, NULL, NULL);
        	if(!tree1)
        	{
               		freeList(head);
                	return NULL;
        	}
	}
	
	else
		tree1 = node1-> tree;

	node2 = node1 -> next;
        if(!node2)
        {
                tree2 = NULL;
		rest = NULL;
        }


	else if(node2 -> tree == NULL)
	{
		tree2 = makeTreeNode(node2->frequency, node2->ch, NULL, NULL);
		if(!tree2)
        	{
			freeTree(tree1);
                	freeList(head);
                	return NULL;
        	}
	
		rest = node2 -> next;
	}
	
	else
	{
		tree2 = node2->tree;
		rest = node2 -> next;
	}

	head -> next = rest;
	/*
	treehead = makeTreeNode(node1->frequency + node2->frequency, tree1->ch, tree1, tree2);*/
	treehead = makeTreeNode(node1->frequency + node2->frequency, -1, tree1, tree2);
        if(!treehead)
        {
		freeTree(tree1);
		freeTree(tree2);
                freeList(head);
                return NULL;
        }
/*
	if(node1)
		printf("Node1 freq: %i\n", node1->frequency);

	if(node2)
		printf("Node2 freq: %i\n", node2->frequency);
	
	printf("tree freq: %i\n\n", treehead -> frequency);
*/
	node1 = makeHeapNode(treehead->ch, treehead->frequency, treehead, NULL);
	if(!node1)
	{
		freeTree(treehead);
		freeList(head);
		return NULL;
	}
	head -> size -= 2;
	head -> frequency -= node1 -> frequency;

	head = addNodeOrdered(head, node1);

	return head;
	
}



char **getCodes(heaphead *head)
{
	char **codes = NULL;
	char *temp = NULL;
	
	if(!head || !(head -> next) || !(head -> next -> tree))
		return NULL;
	
	codes = (char **)calloc(256, sizeof(char*));
        if(!codes)
                return NULL;

	temp = (char *)calloc(256, sizeof(char));
        if(!codes)
                return NULL;

	fillCodes(head -> next -> tree ->left, codes, temp, 0, '0');
	fillCodes(head -> next -> tree ->right, codes, temp, 0, '1');

	return codes;
}

void fillCodes(bst *tree, char **codes, char *str, int depth, char direction)
{
	char *tempstr = NULL;
	if(!tree)
		return;

	str[depth] = direction;
	str[depth+1] = '\0';
	/*printf("depth: %i, str: %s\n", depth, str);
	*/
	if(!(tree->left) && !(tree->right))
	{	
		/*str[depth] = direction;*/
		tempstr = (char *)malloc((strlen(str)+1)*sizeof(char));
		if(!tempstr)
		{
			freeCodes(codes);
			return;
		}

		if(!(strcpy(tempstr, str)))
		{
			freeCodes(codes);
			free(tempstr);
			return;
		}
		
		
		codes[tree->ch] = tempstr;
	}

	else
	{
		if(tree->left) 
		{
			/*printf("calling again, with next depth of %i\n", depth+1);
			*/
			fillCodes(tree ->left, codes, str, depth+1, '0');
        	}
		if(tree->right)
		{			
			fillCodes(tree ->right, codes, str, depth+1, '1');
		}
	}
}

void printCodes(char **codes)
{
	int i = 0;

	for(i=0; i<256; i++)
	{
		if(codes[i] != NULL)
		{	
			printf("0x%02x: %s\n", i, codes[i]);
		}
	}
}	

void freeCodes(char **codes)
{
	int i = 0;

        for(i=0; i<256; i++)
        {
                if(codes[i] != NULL)
                {
                        free(codes[i]);
                }
        }

	free(codes);
}
